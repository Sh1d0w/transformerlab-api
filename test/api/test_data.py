from fastapi.testclient import TestClient
from api import app
from io import BytesIO
import json
import os
from transformerlab.shared import dirs
from transformerlab.shared.shared import slugify


def test_data_gallery():
    with TestClient(app) as client:
        resp = client.get("/data/gallery")
        assert resp.status_code == 200
        assert "data" in resp.json() or "status" in resp.json()


def test_data_list():
    with TestClient(app) as client:
        resp = client.get("/data/list")
        assert resp.status_code == 200
        assert isinstance(resp.json(), list) or isinstance(resp.json(), dict)


def test_data_info():
    with TestClient(app) as client:
        resp = client.get("/data/info?dataset_id=dummy_dataset")
        assert resp.status_code in (200, 400, 404)


def test_data_preview():
    with TestClient(app) as client:
        resp = client.get("/data/preview?dataset_id=dummy_dataset")
        assert resp.status_code in (200, 400, 404)


def test_save_metadata():
    test_data = [
        {"__index__": 0, "image": "dummy.jpg", "text": "caption A"},
        {"__index__": 1, "image": "dummy2.jpg", "text": "caption B"},
    ]

    with TestClient(app) as client:
        response = client.post(
            "/data/save_metadata",
            data={"dataset_id": "dummy_dataset"},
            files={"file": ("patch.json", BytesIO(json.dumps(test_data).encode("utf-8")), "application/json")},
        )
        assert response.status_code in (200, 400, 404)


def test_save_metadata_and_preview():
    test_dataset_id = "dummy_dataset"
    test_rows = [
        {"file_name": "dummy0.jpg", "previous_caption": "Original caption 0", "text": "Updated caption 1"},
        {"file_name": "dummy1.jpg", "previous_caption": "Original caption 1", "text": "Updated caption 2"},
    ]

    with TestClient(app) as client:
        dataset_dir = dirs.dataset_dir_by_id(slugify(test_dataset_id))
        os.makedirs(dataset_dir, exist_ok=True)
        metadata_path = os.path.join(dataset_dir, "autogenerated_metadata.jsonl")

        # Create initial metadata with matching file names and captions
        with open(metadata_path, "w", encoding="utf-8") as f:
            for i in range(2):
                row = {"file_name": f"dummy{i}.jpg", "text": f"Original caption {i}"}
                f.write(json.dumps(row) + "\n")

        # Post updated metadata
        response = client.post(
            f"/data/save_metadata?dataset_id={test_dataset_id}",
            files={"file": ("patch.json", BytesIO(json.dumps(test_rows).encode("utf-8")), "application/json")},
        )
        assert response.status_code == 200

        # Reload metadata and check updated captions
        with open(metadata_path, "r", encoding="utf-8") as f:
            updated_rows = [json.loads(line) for line in f]
        for updated, expected in zip(updated_rows, test_rows):
            assert updated["text"] == expected["text"]

        # Test preview works
        resp = client.get(f"/data/preview?dataset_id={test_dataset_id}")
        assert resp.status_code == 200 or resp.status_code == 400


def test_data_preview_trelis_touch_rugby_rules():
    with TestClient(app) as client:
        resp = client.get("/data/preview", params={"dataset_id": "Trelis/touch-rugby-rules", "limit": 2})
        assert resp.status_code in (200, 400, 404)
        if resp.status_code == 200 and resp.json().get("status") == "success":
            data = resp.json()["data"]
            assert "len" in data
            # Should have either columns or rows
            assert "columns" in data or "rows" in data
